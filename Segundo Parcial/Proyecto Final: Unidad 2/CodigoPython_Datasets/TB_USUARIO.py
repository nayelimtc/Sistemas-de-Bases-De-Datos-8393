# -*- coding: utf-8 -*-
"""TB_USUARIO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VTZa6AwQf9mqEy9BGKAzg6MFdDT5KQm

**Proyecto Final: Unidad 1**

**Tb_usuario**
"""

#Faker es un paquete de Python que genera datos falsos.
!pip install Faker

#Librerías necesarias para la generación de datos.
import pandas as pd
import uuid
import random
from faker import Faker
import datetime

#Librerías para generar cadena de numeros
import random as r
from random import seed
from datetime import datetime

#Variable asignada para el tamaño del conjunto de datos. 
num_iess = 5000

#Lista de 4 características (Atributos)
features = [
    "INT_ID_USUARIO",
    "VAR_NOMBRE_USUARIO",
    "VAR_CONTRASENIA_USUARIO",
    "INT_ID_PERSONA",
]# Creando un DF para estas características
df = pd.DataFrame(columns=features)

"""**INT_ID_USUARIO**"""

#Biblioteca uuid para generar cadena aleatoria de datos.
df['INT_ID_USUARIO'] = [uuid.uuid4().hex for i in range(num_iess)]

#Genera identificaciones únicas para cada usuario. Si todas las ID en el conjunto de datos son únicas, devuelve True.
print(df['INT_ID_USUARIO'].nunique()==num_iess)

"""**VAR_NOMBRE_USUARIO**"""

#Variable para los géneros para la creación de los nombres.
genero = ["female", "male"]

#Nombres.
df['genero']= random.choices(
    genero, 
    weights=(30,30), 
    k=num_iess)

#Instancia Faker
faker = Faker()
#Función.
def name_gen(genero):
    #Para masculino
    if genero=='male':
        return faker.name_male()
    #Para femenino
    elif genero=='female':
        return faker.name_female()
    #Genera los nombres
    return faker.name()
df['VAR_NOMBRE_USUARIO'] = [name_gen(i) for i in df['genero']]

"""**VAR_CONTRASENIA_USUARIO**"""

#Uso de la biblioteca uuid para generar cadena aleatoria de datos para la clave o contraseña.
df['VAR_CONTRASENIA_USUARIO'] = [uuid.uuid4().hex for i in range(num_iess)]

#Genera identificaciones únicas para cada usuario. Si todas las claves en el conjunto de datos son únicas, devuelve True.
print(df['VAR_CONTRASENIA_USUARIO'].nunique()==num_iess)

"""**INT_ID_PERSONA**"""

#Biblioteca uuid para generar cadena aleatoria de datos.
df['INT_ID_PERSONA'] = [uuid.uuid4().hex for i in range(num_iess)]

#Genera identificaciones únicas para cada usuario. Si todas las ID en el conjunto de datos son únicas, devuelve True.
print(df['INT_ID_PERSONA'].nunique()==num_iess)

#Eliminar genero, no es necesario para esta entidad.
del(df['genero'])

#Visualizar en la tabla los datos generados antes de descargar el excel.
df.head(5)

#Generar excel de los datos.
df.to_csv('TB_USUARIO.csv')
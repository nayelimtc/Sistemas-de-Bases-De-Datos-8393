# -*- coding: utf-8 -*-
"""Tb_Afiliación.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FLw0g6jJRnBvDT1rl1Xkf2WedGG1WB2h

**Proyecto Final: Unidad 2**

**Entidad: Tb_Afiliacion**
"""

#Faker es un paquete de Python que genera datos falsos.
!pip install Faker

#Librerías necesarias para la generación de datos.
import pandas as pd
import uuid
import random
from faker import Faker
import datetime

#Librerías necesarias para el detalle o la descripción.
import string
import random
from random import seed
from datetime import datetime

#Variable asignada para el tamaño del conjunto de datos. 
num_iess = 5000

"""- Int_id_afiliacion:una cadena de números para identificar en este caso un tipo de afilicion
     - Var_nombre_afiliacion: tipo de datos de cadena para identificar la afiliacion
     - Var_tipo_afiliacion:tipo de cadena para saber el tipo de afiliacion
     - Var_estado_afiliacion: tipo de cadena para saber el estado de una afiliacion

Se ingresan los atributos como una lista para inicializar un marco de datos de Pandas:
"""

#Lista con los atributos
features = [
    "INT_ID_AFILIACION",
    "CI_PERSONA",
    "VAR_NOMBRE_AFILIACION",
    "VAR_TIPO_AFILIACION",
    "VAR_ESTADO_AFILIACION",
]#Creamos un dataframe para estos atributos
df = pd.DataFrame(columns=features)

"""**id_afiliacion**"""

#Biblioteca uuid para generar cadena aleatoria de datos para id_afiliacion
df['INT_ID_AFILIACION'] = [uuid.uuid4().hex for i in range(num_iess)]

#Genera identificaciones únicas para cada usuario. Si todas las ID en el conjunto de datos son únicas, devuelve True.
print(df['INT_ID_AFILIACION'].nunique()==num_iess)

"""
**nombre_afiliacion**
"""

#Los diferentes nombres de roles.
nombre_afiliacion = ['Voluntario','Asegurado']
#Creacion de los permisos para cada una de las filas
df['VAR_NOMBRE_AFILIACION'] = random.choices(
  nombre_afiliacion, 
    weights=(40,10), 
    k=num_iess
)

"""**tipo_afiliacion**"""

#Los diferentes nombres de roles.
tipo_afiliacion = ['Pensionista','Afiliado']
#Creacion de los permisos para cada una de las filas
df['VAR_TIPO_AFILIACION'] = random.choices(
  tipo_afiliacion, 
    weights=(40,10), 
    k=num_iess
)

"""**estado_afiliacion**"""

#Los diferentes nombres de estados.
estado_afiliacion = ['Activo','Inactivo']
#Creacion de los permisos para cada una de las filas
df['VAR_ESTADO_AFILIACION'] = random.choices(
  estado_afiliacion, 
    weights=(40,10), 
    k=num_iess
)

"""**ci_persona**"""

#Variable para los géneros para la creación de los nombres.
genero = ["female", "male"]

#Nombres.
df['genero']= random.choices(
    genero, 
    weights=(30,30), 
    k=num_iess)

cedula=[]
#Cantidad de números para la cadena..
size = 10
for i in range(0, num_iess):
  random.seed(datetime.now())
  #Números opcionales para formar la cadena.
  valores = [0,1,2,3,4,5,6,7,8,9]
  cedula=(''.join([str(random.choice(valores)) for i in range(size)]))
  #Se guarda los números en telefonocallcenter.
  df.CI_PERSONA[i]=cedula

#Eliminar genero, no es necesaerio para esta entidad.
del(df['genero'])

#Eliminar genero, no es necesaerio para esta entidad.
del(df['CI_PERSONA'])

#Visualizar en la tabla los datos generados antes de descargar el excel.
df.head(5)

#Generar excel de los datos.
df.to_csv('TB_AFILIACION.csv')